@model MySchoolSystem.Models.ViewModels.Course_TodoViewModel;
@{ ViewData["Title"] = "Todos"; }



<h5>Subject: <span class="text-muted">@Model.Subject </span></h5>
<p>@ViewBag.Message</p>


<table class="table table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ExpirationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Rubric)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Points)
            </th>
            <th>
               Options
            </th>
        </tr>
    </thead>
    <tbody>
        @*sort by date*@
        @foreach (Todo t in Model.Todos)
        {
            <tr id="@t.Id">
                @*<td>@t.ExpirationDate.ToString("MM/dd/yyyy")</td>*@
                <td>@t.ExpirationDate</td>
                <td>@t.Type</td>
                <td><a href="@t.Rubric" target="_blank">Rubric</a></td>
                <td>@t.Points</td>
                <td>
                    <button onclick="getTodoReady(@Model.Id, @t.Id)"
                        class="btn btn-outline-info"
                        data-toggle="modal" data-target="#exampleModal">Edit</button>
                </td>
            </tr>
        }

    </tbody>
</table>

<!-- Button trigger modal -->
<button onclick="getFormReadyClean(@Model.Id)" type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#exampleModal">
    Create assignment
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <form method="post" enctype="multipart/form-data" class="modal-content" asp-controller="Course" asp-route-CourseId=@Model.Id asp-action="AddTodo">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Creating assingment</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label asp-for="Type" class="control-label"></label>
                    <input asp-for="Type" class="form-control" />
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>
                @*<div class="form-group">
                    <label asp-for="Rubric" class="control-label"></label>
                    <input asp-for="Rubric" class="form-control" />
                    <span asp-validation-for="Rubric" class="text-danger"></span>
                </div>*@
                <div class="form-group">
                    <div>
                        <label asp-for="Rubric" class="control-label"></label>
                        <div class="custom-file">
                            <label asp-for="Rubric" class="custom-file-label">Rubric</label>
                            @*<label class="custom-file-label" asp-for="Rubric">Click to choose file</label>*@
                            <input name="Rubric" type="file" accept=".txt" class="custom-file-input" asp-for="Rubric">
                        </div>
                        <span asp-validation-for="Rubric" class="text-danger"></span>
                    </div>

                </div>

                <div class="form-group">
                    <label asp-for="Points" class="control-label"></label>
                    <input asp-for="Points" class="form-control" />
                    <span asp-validation-for="Points" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="ExpirationDate" class="control-label"></label>
                    <input asp-for="ExpirationDate" class="form-control" />
                    <span asp-validation-for="ExpirationDate" class="text-danger"></span>
                </div>
                <input hidden asp-for="Id" readonly class="form-control" />

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" id="addSubmitBtn">Add</button>
            </div>
        </form>
    </div>
</div>
<script>
    let foundTodo = {};
    let form = document.forms[0];
    const originalForm = form.cloneNode(true);
    //make all keys lowercase for inputs  
    function toLowerKeys(obj) {
        return Object.keys(obj).reduce((accumulator, key) => {
            accumulator[key.toLowerCase()] = obj[key];
            return accumulator;
        }, {});
    }
    
    async function getTodoReady(CourseId, TodoId) {
        try {
            let resp = await fetch(`/Todo/JSONDetails/${TodoId}`)
            foundTodo = toLowerKeys(await resp.json())
            getFormReady(CourseId, TodoId)
        }
        catch (e) {
            alert(e.message)
        }
    }

    function getFormReady(CourseId, TodoId) {
        @*form.setAttribute("method", "PUT")  >>> method not allowed, left as POST*@
        form.action = `/Course/${CourseId}/UpdateTodo/${TodoId}`
        document.getElementById("addSubmitBtn").textContent = "Update";
        //set method = put, btns value = update

        let data = new FormData(form);
        for (let [key, value] of data) {
            //console.log(key) testing rubric

            if (document.getElementById(`${key}`)) {
                //if date, format
                if (key == "ExpirationDate") {
                    document.getElementById(`${key}`).value = new Date(foundTodo[key.toLocaleLowerCase()]).toISOString().slice(0, 10)
                } else if(key == "Rubric"){
                    //console.log("yield rubric")
                    continue
                }
                else {
                    document.getElementById(`${key}`).value = foundTodo[key.toLocaleLowerCase()]
                }
            }   
        }
    };

    function getFormReadyClean(CourseId) {
        form.action = `/Course/${CourseId}/AddTodo`
        document.getElementById("addSubmitBtn").textContent = "Add";
        let data = new FormData(form);
        for (let [key] of data) {
            if (document.getElementById(`${key}`)) {
                //if date, format 
                if (key == "ExpirationDate") {
                    document.getElementById(`${key}`).value = new Date().toLocaleDateString()
                } if (key == "Id") {
                    document.getElementById(`${key}`).value = CourseId
                }
                else {
                    document.getElementById(`${key}`).value = ""
                }
            }
        }
    }



</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
