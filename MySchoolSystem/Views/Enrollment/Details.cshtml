@model MySchoolSystem.Models.Enrollment

@{ ViewData["Title"] = "Details";
    var assignmentsFromServer = Model.Submitted_Assignments; }


<div class="container">
    <button class="btn p-0" type="button" data-toggle="collapse" data-target="#toggleDetails" aria-expanded="false" aria-controls="collapseExample">
        <h4 class=" dropdown-toggle">
            Enrollment Details:
        </h4>
    </button>
    <hr />

    <div class="collapse" id="toggleDetails">
        <dl class="row">
            <dt class="col-sm-3">
                Student ID
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Student.Id)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Student)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Student.FirstName)  @Html.DisplayFor(model => model.Student.LastName)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Course.Subject)
            </dt>
            <dd class="col-sm-9">
                @{ String courseInstructorDisplay = Model.Course.Subject.SubjectName + " - " + Model.Course.Instructor.FirstName + " " + Model.Course.Instructor.LastName; }

                @Html.DisplayFor(model => courseInstructorDisplay)

                @*@Html.DisplayFor(model => model.Course.Instructor.FirstName) @Html.DisplayFor(model => model.Course.Instructor.LastName)*@
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Year)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Year)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Period)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Period.SeasonName)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Grade)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Grade.Grade)
            </dd>

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Dropped)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Dropped)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Notes)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Notes)
            </dd>
        </dl>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
            <a asp-action="Index">Back to List</a>
        </div>
    </div>
</div>




<div class="container mt-4">
    <h4>Course Tasks:</h4>

    @*List all the course tasks*@
    @if (Model.Course.Todos != null)
    {
<table class="table">
    <thead>
        <tr>
            <th>
                Type
            </th>
            <th>
                Rubric
            </th>
            <th>
                Max Points
            </th>
            <th>
                Due Date
            </th>
            <th>
                Points
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.Course.Todos)
        {
<tr>
    <td>
        @Html.DisplayFor(modelItem => task.Type)
    </td>
    <td>
        @*@Html.DisplayFor(modelItem => task.Rubric)*@
        @{ var cleanRubric = task.Rubric.Substring(task.Rubric.IndexOf("wwwroot") + 7); }
        <a href="cleanRubric" target="_blank">Rubric</a>
    </td>
    <td>
        @Html.DisplayFor(modelItem => task.Points)
    </td>

    <td>
        @*@Html.DisplayFor(modelItem => task.ExpirationDate)*@
        @{ var fixedTime = task.ExpirationDate.ToString("MM/dd/yyyy");}
        @Html.DisplayFor(modelItem => fixedTime)
    </td>
    @foreach (var assignment in assignmentsFromServer)
    {
        if (assignment.Task.Id == task.Id)
        {
<td>
    @*<p class="btn btn-outline-secondary">@(assignment.GradedPoints == -1? "Not Graded yet" : assignment.GradedPoints) </p>*@
    @if (assignment.GradedPoints == -1)
    {


<p class="btn btn-outline-secondary">No Graded Yet</p> }
else
{
<p class="btn btn-outline-secondary">@assignment.GradedPoints</p>}
</td>
                            <td>
                                <a class="btn btn-outline-secondary" target="_blank" href="@assignment.FileLocation">Check</a>
                            </td>}
                                                }
    @if (!(task.ExpirationDate <= DateTime.Now))
    {
<td>
    <button onclick="setTodoId(@task.Id)" type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#exampleModal">
        Submit
    </button>
    @*Only if user is teacher: auth required*@
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ModalRegrade">
        Grade
    </button>
</td>
}
</tr>}

    </tbody>
</table> }


else
{
<hr />
                <p>No tasks for this course</p>}



</div>



@*Modal*@
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <form method="post" enctype="multipart/form-data" asp-controller="Enrollment" asp-action="SubmitFile">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Select File</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @*main*@
                <div class="modal-body">
                    <input hidden name="CourseId" value=@Model.Course.Id />
                    <input hidden name="TodoId" value="" id="TodoIdInput" />
                    <input hidden name="EnrollmentId" value=@Model.Id />


                    <div class="input-group mb-3">
                        <div class="custom-file">
                            <label class="custom-file-label" for="inputFileToUpload">Click to choose file</label>
                            <input name="FileUpload" type="file" accept=".txt"
                                   class="custom-file-input" id="inputFileToUpload">
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-outline-success">Submit</button>
                </div>

            </div>
        </div>
    </form>
</div>

@*Modal Regrade*@
<div class="modal fade" id="ModalRegrade" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <p class="btn btn-outline-secondary">Grade:</p>
                    </div>
                    <input type="text" class="form-control" placeholder="" aria-label="" aria-describedby="grading input">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
<script>function setTodoId(TodoId) {
        let inputField = document.getElementById("TodoIdInput")
        inputField.value = TodoId

    }</script>

